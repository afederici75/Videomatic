@using Blazorise.Localization

<Bar @bind-Visible="@topbarVisible" 
     Breakpoint="Breakpoint.Desktop" 
     Background="Background.Dark"
     ThemeContrast="ThemeContrast.Dark">

    <BarBrand>
        <BarItem>
            <BarLink To="">
                <BarIcon Margin="Margin.Is2.FromEnd" IconName="IconName.Film" />
                Videomatic
            </BarLink>
        </BarItem>
    </BarBrand>
    <BarToggler Mode="BarTogglerMode.Normal" />
    <BarMenu>
        <BarStart>
          
        </BarStart>
        <BarEnd>
            <Button Color="Color.Primary">
                <Icon Name="IconName.BellSlash" />
            </Button>

            <Button Color="Color.Primary">
                <Icon Name="IconName.User" />
            </Button>            
        </BarEnd>
    </BarMenu>
</Bar>
@code {
    protected override async Task OnInitializedAsync()
    {
        await SelectCulture( "en-US" );

        await base.OnInitializedAsync();
    }

    Task SelectCulture( string name )
    {
        LocalizationService!.ChangeLanguage( name );

        return Task.CompletedTask;
    }

    private bool topbarVisible = false;

    Task OnLayoutTypeChecked( string layoutType )
    {
        LayoutType = layoutType;

        return LayoutTypeChanged.InvokeAsync( layoutType );
    }

    [Parameter] public EventCallback<bool> ThemeEnabledChanged { get; set; }

    [Parameter] public EventCallback<bool> ThemeGradientChanged { get; set; }

    [Parameter] public EventCallback<bool> ThemeRoundedChanged { get; set; }

    [Parameter] public EventCallback<string> ThemeColorChanged { get; set; }

    [Parameter] public string? LayoutType { get; set; }

    [Parameter] public EventCallback<string> LayoutTypeChanged { get; set; }

    [Inject] protected ITextLocalizerService? LocalizationService { get; set; }

    [CascadingParameter] protected Theme? Theme { get; set; }
}