@page "/Playlist/{PlaylistId:long}"
@inject ISender Sender;

@*@foreach (var item in EventType)
{
    @item
    <hr />
}
*@
<CardDeck>
@foreach (var video in Videos)
{
    <VideoCard Model=video />
}   
</CardDeck>

@code {
    VideoDTO[] Videos = Array.Empty<VideoDTO>();    

    [Parameter]
    public long PlaylistId { get; set; } = 0;
    List<string> EventType = new List<string>();

    private bool shouldRender;

    protected override bool ShouldRender()
    {
        EventType.Add(" 5 Should render called");
        return shouldRender;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add(" 7 OnAfterRender Async Started");
        
        return;        
    }

    protected override void OnInitialized()
    {
        EventType.Add(" 1 OnInit");
    }
    protected override async Task OnInitializedAsync()
    {
        EventType.Add("2 OnInit Async");
        

    }
    protected override void OnParametersSet()
    {
        EventType.Add("3 On Parameter set ");
    }
    protected override async Task OnParametersSetAsync()
    {
        EventType.Add(" 4 OnParametersSet Async Started");        

        GetVideosByPlaylistResponse resp = await Sender.Send(new GetVideosByPlaylistQuery(PlaylistId));
        Videos = resp.Items.ToArray();

        shouldRender = true;
    }
    
    protected override void OnAfterRender(bool firstRender)
    {
        EventType.Add(" 6 OnAfterRenderStarted");
    }

}