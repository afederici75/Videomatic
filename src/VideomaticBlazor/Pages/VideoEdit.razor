@page "/VideoEdit/{VideoId:long}"
@inject ISender Sender;

@using Blazorise.RichTextEdit
@using Blazorise.Video
@using Company.Videomatic.Application.Features.Artifacts.Queries;
@using Company.Videomatic.Application.Features.Transcripts.Queries;
@using Company.Videomatic.Application.Features.Transcripts;
@using Company.Videomatic.Application.Features.Videos;

<Row class="sticky-top">
    <Column>
        <Accordion>
            <Collapse Visible="true">
                <CollapseHeader>
                    <Heading Size="HeadingSize.Is5">
                        <AccordionToggle>Video</AccordionToggle>
                    </Heading>
                </CollapseHeader>
                <CollapseBody>
                    <Row>
                        <Column ColumnSize="ColumnSize.Is8">
                            <iframe width="560" height="315"
                                    src=@EmbeddedVideoLink
                                    frameborder="0"
                                    allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
                                    allowfullscreen></iframe>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is4">
                            <Badge Style="color: chartreuse">@Video.TagCount Tags</Badge>
                            <Badge Style="color: coral">@Video.TranscriptCount Transcript(s)</Badge>
                            <Badge Style="color: forestgreen">@Video.ArtifactCount Artifact(s)</Badge>
                            <Badge Color="Color.Primary">@Video.Provider</Badge>
                            <Badge Color="Color.Primary">@Video.ProviderVideoId</Badge>
                            <Badge Color="Color.Primary">@Video.VideoPublishedAt</Badge>
                            <Badge Color="Color.Primary">@Video.VideoOwnerChannelTitle</Badge>
                            <Badge Color="Color.Primary">@Video.VideoOwnerChannelId</Badge>
                        </Column>
                    </Row>
                    <Row>
                        <Column>
                            @foreach (var tag in Video?.Tags ?? Array.Empty<string>())
                            {
                                <Badge Color="Color.Info" Margin="Margin.Is1.FromEnd" >@tag</Badge>
                            }

                        </Column>
                    </Row>                    
                </CollapseBody>
            </Collapse>
        </Accordion>
    </Column>
</Row>


<Accordion>   
    <Collapse Visible="true">
        <CollapseHeader>
            <Heading Size="HeadingSize.Is5">
                <AccordionToggle>Original Description</AccordionToggle>
            </Heading>
        </CollapseHeader>
        <CollapseBody>
            <RichTextEdit @ref="richTextEditRef"
                          Theme="RichTextEditTheme.Snow"
                          ContentChanged="@OnContentChanged"
                          PlaceHolder="Type your post here..."
                          ReadOnly="@readOnly"
                          SubmitOnEnter="false"
                          EnterPressed="@OnSave"
                          ToolbarPosition="Placement.Bottom">
                <Editor>@Video.Description</Editor>
                <Toolbar>
                    <RichTextEditToolbarGroup>
                        <RichTextEditToolbarButton Action="RichTextEditAction.Bold" />
                        <RichTextEditToolbarButton Action="RichTextEditAction.Italic" />
                        <RichTextEditToolbarSelect Action="RichTextEditAction.Size">
                            <RichTextEditToolbarSelectItem Value="small" />
                            <RichTextEditToolbarSelectItem Selected />
                            <RichTextEditToolbarSelectItem Value="large" />
                            <RichTextEditToolbarSelectItem Value="huge">Very Big</RichTextEditToolbarSelectItem>
                        </RichTextEditToolbarSelect>
                        <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="ordered" />
                        <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="bullet" />
                    </RichTextEditToolbarGroup>
                    <!-- Custom toolbar content -->
                    <RichTextEditToolbarGroup Float="Float.End">
                        <Button onClick="window.open('https://www.quilljs.com/','quilljs')"><Icon Name="IconName.InfoCircle" /></Button>
                        <Button Clicked="@OnSave"><Icon Name="IconName.Save" /></Button>
                    </RichTextEditToolbarGroup>
                </Toolbar>
            </RichTextEdit>
        </CollapseBody>
    </Collapse>

    <Collapse Visible="false">
        <CollapseHeader>
            <Heading Size="HeadingSize.Is5">
                <AccordionToggle>Transcript</AccordionToggle>
            </Heading>
        </CollapseHeader>
        <CollapseBody>
            @foreach (var transcript in Transcripts.Items)
            {
                @transcript.Language
                foreach (var line in transcript.Lines ?? Array.Empty<TranscriptLineDTO>())
                {
                    <div>
                        <Badge Color="Color.Secondary">@(line.StartsAt?.ToString(@"hh\:mm\:ss") ?? "NA")</Badge>
                        <Badge Color="Color.Primary">@(line.Duration?.ToString(@"hh\:mm\:ss") ?? "NA")</Badge>
                        @line.Text
                    </div>
                }
            }
        </CollapseBody>
    </Collapse>

    <Collapse Visible="true">
        <CollapseHeader>
            <Heading Size="HeadingSize.Is5">
                <AccordionToggle>Artifacts (Summary, TOC, etc.)</AccordionToggle>
            </Heading>
        </CollapseHeader>
        <CollapseBody>
        </CollapseBody>
    </Collapse>

    
    <Collapse Visible="true">
        <CollapseHeader>
            <Heading Size="HeadingSize.Is5">
                <AccordionToggle>Playlists</AccordionToggle>
            </Heading>
        </CollapseHeader>
        <CollapseBody>
        </CollapseBody>
    </Collapse>
</Accordion>

@code {
    [Parameter]
    public VideoDTO Video { get; set; } = new(1, "Nowhere", "No Title", "No Description");

    [Parameter]
    public long VideoId { get; set; } = 0;

    Page<TranscriptDTO> Transcripts { get; set; } = Page<TranscriptDTO>.Empty;
    
    public string EmbeddedVideoLink { get; set; } = string.Empty;

    public bool CollapseDescription { get; set; } = true;   
    public bool CollapseTranscripts { get; set; } = false;

    protected override async Task OnParametersSetAsync()
    {
        var query = new GetVideosQuery(
            VideoIds: new[] { VideoId },            
            IncludeTags: true,
            IncludeThumbnail: ThumbnailResolutionDTO.Default
        );        

        var result = await Sender.Send(query);
        Video = result.Items.Single();

        EmbeddedVideoLink = "https://www.youtube.com/embed/" + 
                            Video.Location.Substring(Video.Location.IndexOf("=") + 1);


        Transcripts = await Sender.Send(new GetTranscriptsQuery(VideoIds: new[] { VideoId }));                
    }

    protected RichTextEdit richTextEditRef;
    protected bool readOnly;
    protected string contentAsHtml;
    protected string contentAsDeltaJson;
    protected string contentAsText;
    protected string savedContent;

    public async Task OnContentChanged()
    {
        contentAsHtml = await richTextEditRef.GetHtmlAsync();
        contentAsDeltaJson = await richTextEditRef.GetDeltaAsync();
        contentAsText = await richTextEditRef.GetTextAsync();
    }

    public async Task OnSave()
    {
        savedContent = await richTextEditRef.GetHtmlAsync();
        await richTextEditRef.ClearAsync();
    }
}
