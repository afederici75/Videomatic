using Company.Videomatic.Application.Features.Videos.Commands.DeleteVideo;
using Company.Videomatic.Domain.Model;
using Company.Videomatic.Domain.Specifications;
using System.Runtime.CompilerServices;

namespace Company.Videomatic.Application.Tests.Features.Videos;

public class ApplicationTests
{        
    [Theory]
    [InlineData(null, null, YouTubeVideos.HyonGakSunim_WhatIsZen)]
    public virtual async Task ImportVideoCommandWorks(
            [FromServices] ISender sender,
            [FromServices] IVideoRepository repository,
            string videoId)
    {
        string url = YouTubeVideos.GetUrl(videoId);
        ImportVideoResponse response = await sender.Send(new ImportVideoCommand(url));

        response.Should().NotBeNull();
        response.Video.Should().NotBeNull();
        response.Video.Id.Should().NotBe(0); // The id is generated by the storage
        response.Video.Thumbnails.Should().NotBeEmpty();
        response.Video.Transcripts.Should().NotBeEmpty();
        response.Video.Artifacts.Should().HaveCount(2);
        
        // Queries 
        var video2 = await repository.GetVideoByIdAsync(new(response.Video.Id));
        response.Video.Should().BeEquivalentTo(video2);
    }

    [Theory]
    [InlineData(null, null)]
    public virtual async Task ImportVideoCommandWorksForAllVides(
            [FromServices] ISender sender,
            [FromServices] IVideoRepository repository)
    {
        int lastId = 0;
        string[] videoIds = YouTubeVideos.GetVideoIds(); 
        foreach (var videoId in videoIds)
        {
            var url = YouTubeVideos.GetUrl(videoId);
            ImportVideoResponse response = await sender.Send(new ImportVideoCommand(url));

            response.Video.Id.Should().NotBe(lastId); // The id is generated by the storage
            lastId = response.Video.Id;            
        }

        // Queries 
        var spec = new GetVideosSpecification();
        IEnumerable<Video> videos = await repository.GetVideosAsync(spec);

        videos.Should().NotBeNullOrEmpty();
        videos.Should().HaveCountGreaterThanOrEqualTo(videoIds.Length);                
    }

    [Theory]
    [InlineData(null, null)]
    public virtual async Task DeleteVideoCommandWorksForAllVides(
            [FromServices] ISender sender,
            [FromServices] IVideoRepository repository)
    {        
        // Imports
        var videoIds = YouTubeVideos.GetVideoIds();
        foreach (var videoId in videoIds)
        {
            ImportVideoResponse response = await sender.Send(
                new ImportVideoCommand(YouTubeVideos.GetUrl(videoId)));
        }

        // Queries 
        var spec = new GetVideosSpecification();
        IEnumerable<Video> videos = await repository.GetVideosAsync(spec);        
        videos.Should().HaveCount(videoIds.Length);

        // Deletes
        var expectedCount = videos.Count();
        foreach (var video in videos)
        {
            DeleteVideoResponse response = await sender.Send(new DeleteVideoCommand(video.Id));
            response.Deleted.Should().BeTrue(); 
        }

        // Queries
        videos = await repository.GetVideosAsync(spec);
        videos.Should().HaveCount(0);
    }
}
