using Company.Videomatic.Application.Features.Videos.Commands.ImportVideo;
using MediatR;

namespace Company.Videomatic.Application.Tests;

public class ApplicationTests
{
    [Theory]
    [InlineData(null, null)]
    public async Task ImportFromMockImporter(
        [FromServices] IVideoImporter importer,
        [FromServices] IVideoStorage storage)
    {
        var video = await importer.ImportAsync(new Uri("http://nowhere.com?32kjjkebewkjbew"));
        video.Should().NotBeNull();
        video.Id.Should().BeLessThanOrEqualTo(0);

        var updateResult = await storage.UpdateVideoAsync(video);
        updateResult.Should().BeGreaterThan(0);

        var deleteResult = await storage.DeleteVideoAsync(video.Id);
        deleteResult.Should().BeTrue();
    }

    [Theory]
    [InlineData(null)]
    public async Task ImportFromMediatr(
        [FromServices] ISender sender)
    {
        ImportVideoResponse response = await sender.Send(new ImportVideoCommand("http://nowhere.com?32kjjkebewkjbew"));
        response.Should().NotBeNull();
        response.Video.Should().NotBeNull();
        response.Video.Id.Should().NotBe(0); // The id is generated by the storage

        //var resp = sender.Send(new ImportVideoCommand("http://nowhere.com?32kjjkebewkjbew"));
        //var updateResult = await storage.UpdateVideoAsync(response.Video);
        //updateResult.Should().BeGreaterThan(0);
        //response.Video.Id.Should().BeGreaterThan(0); // Updated the in memory one
        //
        //var deleteResult = await storage.DeleteVideoAsync(response.Video.Id);
        //deleteResult.Should().BeTrue();
    }

}
