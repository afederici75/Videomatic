@page "/getvideos"
@using Videomatic.Client;
@inject HttpClient HttpClient;

<PageTitle>Get Videos</PageTitle>

<h1>Get Videos</h1>

@if (_params == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@_params" OnSubmit="@Query">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputText @bind-Value="_params.TitlePrefix" placeholder="Title Prefix" />
        <InputText @bind-Value="_params.DescriptionPrefix" placeholder="Description Prefix" />
        <InputText @bind-Value="_params.ProviderIdPrefix" placeholder="Provider Id Prefix" />
        <InputText @bind-Value="_params.ProviderVideoIdPrefix" placeholder="Provider Video Id Prefix" />
        <InputText @bind-Value="_params.VideoUrlPrefix" placeholder="Video Url Prefix" />
        <InputNumber @bind-Value="_params.Take" placeholder="Take" />
        <InputNumber @bind-Value="_params.Skip" placeholder="Skip" />
        @*<InputText @bind-Value="@includes" placeholder="Includes" />
        <InputText @bind-Value="@orderBy" placeholder="Order By" />*@

        <button type="submit">Submit</button>
    </EditForm>
}

@foreach (var v in videoDTOs)
{
    <p>@v.Title</p>
    <p>@v.Description</p>
    <a href="@v.VideoUrl" target="_blank">Watch Video</a>
}

@code {
    GetVideosDTOQueryAsyncParams _params = new ();
    IEnumerable<VideoDTO> videoDTOs = new List<VideoDTO>();

    class GetVideosDTOQueryAsyncParams
    {
        public int? Take { get; set; } = 10;
        public int? Skip { get; set; } = 0;
        public string TitlePrefix { get; set; } = string.Empty;
        public string DescriptionPrefix { get; set; } = string.Empty;
        public string ProviderIdPrefix { get; set; } = string.Empty;
        public string ProviderVideoIdPrefix { get; set; } = string.Empty;
        public string VideoUrlPrefix { get; set; } = string.Empty;

    }    

    private async Task Query()
    {
        var client = new VideomaticClient("https://localhost:7108", HttpClient);
                
        var response = await client.GetVideosDTOQueryAsync(
            _params.Take, 
            _params.TitlePrefix, 
            _params.DescriptionPrefix, 
            _params.ProviderIdPrefix, 
            _params.ProviderVideoIdPrefix, 
            _params.VideoUrlPrefix, 
            _params.Skip, 
            null, 
            null);

        videoDTOs = response.Items;
    }
}
