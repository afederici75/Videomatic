namespace Company.Videomatic.Application.Features.Videos.ImportVideo;

/// <summary>
/// This command is used to import video data located at a given url.
/// </summary>
public partial record ImportVideoCommand(int CollectionId, string VideoUrl) : IRequest<ImportVideoResponse>;

/// <summary>
/// The response returned by ImportVideoCommand.
/// </summary>
/// <param name="VideoId"></param>
public record ImportVideoResponse(int VideoId);

/// <summary>
/// This event is published when a video is imported.
/// </summary>
/// <param name="VideoId"></param>
/// <param name="ThumbNailCount"></param>
/// <param name="TranscriptCount"></param>
/// <param name="ArtifactsCount"></param>
public record VideoImportedEvent(int VideoId, int ThumbNailCount, int TranscriptCount, int ArtifactsCount) : INotification;

/// <summary>
/// The validator for ImportVideoCommand.
/// </summary>
public class ImportVideoCommandValidator : AbstractValidator<ImportVideoCommand>
{
    public ImportVideoCommandValidator()
    {
        RuleFor(v => v.VideoUrl).NotEmpty().WithMessage("VideoUrl is required.");
    }
}

/// <summary>
/// The handler for ImportVideoCommand.
/// </summary>
public class ImportVideoCommandHandler : IRequestHandler<ImportVideoCommand, ImportVideoResponse>
{
    readonly IVideoImporter _importer;
    readonly IRepository<Video> _repository;
    readonly IPublisher _publisher;

    public ImportVideoCommandHandler(
        IVideoImporter importer,
        IRepository<Video> repository,
        IPublisher publisher)
    {
        _importer = importer ?? throw new ArgumentNullException(nameof(importer));
        _repository = repository ?? throw new ArgumentNullException(nameof(repository));
        _publisher = publisher ?? throw new ArgumentNullException(nameof(publisher));
    }

    public async Task<ImportVideoResponse> Handle(ImportVideoCommand request, CancellationToken cancellationToken)
    {        
        // Imports the video from the provider url
        Video newVideo = await _importer.ImportAsync(new Uri(request.VideoUrl));

        // Creates the video 
        Video savedVideo = (await _repository.AddRangeAsync(new[] { newVideo }, cancellationToken))
            .First();

        // Publishes the event VideoImportedEvent. 
        // Artifacts for the video will be generated by a handler for this event.
        await _publisher.Publish(
            new VideoImportedEvent(
                VideoId: savedVideo.Id,
                ThumbNailCount: savedVideo.Thumbnails.Count(),
                TranscriptCount: savedVideo.Transcripts.Count(),
                ArtifactsCount: savedVideo.Artifacts.Count()),
                cancellationToken: cancellationToken);

        return new ImportVideoResponse(VideoId: savedVideo.Id);
    }
}
