@page "/videos"
@using Company.Videomatic.Domain.Aggregates.Video;
@using VideomaticRadzen.Components
@inject ISender Sender

<h3>Videos</h3>

<div class="container-fluid my-3">
    <div class="row">
        <div class="col-md-4 col-lg-3">
            <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H2">
                Filter case sensitivity
            </RadzenText>
            <RadzenDropDown @bind-Value="filterCaseSensitivity" Data="@(Enum.GetValues(typeof(FilterCaseSensitivity)))" Change="@(args => grid.Reload())">
                <Template>
                    @Enum.GetName((FilterCaseSensitivity)context)
                </Template>
            </RadzenDropDown>
        </div>
        <div class="col-md-8 col-lg-9">
            <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H2">
                Filter logical operator
            </RadzenText>
            <RadzenDropDown @bind-Value="logicalFilterOperator" Data="@(Enum.GetValues(typeof(LogicalFilterOperator)))" Change="@(args => grid.Reload())">
                <Template>
                    @Enum.GetName((LogicalFilterOperator)context)
                </Template>
            </RadzenDropDown>
        </div>
        <div class="col-md-8 col-lg-9">
            <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H2">
                Search Text
            </RadzenText>
            <RadzenTextBox @bind-Value="searchText" Change="@(args => grid.FirstPage(true))" />
        </div>
    </div>
</div>

<RadzenButton Text="Reset" Click="@Reset" Style="margin-bottom: 20px;" />

<RadzenDataGrid @ref="grid" 
            TItem="VideoDTO" Data="@videos" Count="@count"
            LoadData="@LoadData"
            AllowFiltering="true" 
            AllowColumnResize="true"
            FilterMode="FilterMode.Simple" 
            PageSize="@pageSize" 
            ShowPagingSummary="true"
            
            AllowPaging="true"
            PagerPosition="PagerPosition.TopAndBottom"
            AllowVirtualization="@allowVirtualization"
            AllowSorting="true" 
            
            FilterCaseSensitivity="@filterCaseSensitivity"
            LogicalFilterOperator="@logicalFilterOperator"
            IsLoading="@isLoading">
    <Columns>
        <!-- 
            // Thumbnail
            // Tags
        -->
        
        <RadzenDataGridColumn TItem="VideoDTO" Property="Id" Title="Id" Filterable="false" Resizable=false Width="50px" />
        <RadzenDataGridColumn TItem="VideoDTO" Property="Name" Title="Name" />
        <RadzenDataGridColumn TItem="VideoDTO" Property="Location" Title="Location" />  
        <RadzenDataGridColumn TItem="VideoDTO" Property="Description" Title="Desc" />

        <RadzenDataGridColumn TItem="VideoDTO" Property="VideoOwnerChannelTitle" Title="Channel" />
        <RadzenDataGridColumn TItem="VideoDTO" Property="Provider" Title="Provider" />
        <RadzenDataGridColumn TItem="VideoDTO" Property="ProviderVideoId" Title="VideoId" />
    </Columns>
</RadzenDataGrid>

<RadzenLabel Text="@count.ToString()" />

@code {
    RadzenDataGrid<VideoDTO>? grid;

    int pageSize = 10;
    bool allowVirtualization = false;
    bool auto = true;    
    FilterCaseSensitivity filterCaseSensitivity = FilterCaseSensitivity.CaseInsensitive;
    LogicalFilterOperator logicalFilterOperator = LogicalFilterOperator.Or;

    bool isLoading = false;
    string searchText;
    IEnumerable<VideoDTO>? videos;
    int count;    

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        isLoading = true;

        await Task.Yield();

        var query = new GetVideosQuery(
                //PlaylistIds: new[] { PlaylistId },
                Skip: 0,
                Take: pageSize,
                SearchText: searchText,
                IncludeTags: true,
                IncludeThumbnail: ThumbnailResolutionDTO.Medium);

        Page<VideoDTO> results = await Sender.Send(query);

        videos = results.Items;
        count = Convert.ToInt32(results.TotalCount);

        if (grid != null)
        {
            await grid.FirstPage(true);
        }

        isLoading = false;
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();

        string? sort = null;
        if (args.Sorts.Any())
        {
            sort = string.Join(", ", args.Sorts.Select(s => $"{s.Property} {(s.SortOrder == SortOrder.Ascending ? "asc" : "desc")}"));
        }

        var query = new GetVideosQuery(
                //PlaylistIds: new[] { PlaylistId },
                Skip: args.Skip,
                Take: args.Top,
                OrderBy: sort,
                SearchText: searchText,
                IncludeTags: true,
                IncludeThumbnail: ThumbnailResolutionDTO.Medium);

        Page<VideoDTO> results = await Sender.Send(query);

        videos = results.Items;
        count = Convert.ToInt32(results.TotalCount);
        
        // Important!!! Make sure the Count property of RadzenDataGrid is set.
        //count = query.Count();
        //
        //// Perform paging via Skip and Take.
        //filteredOrders = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();

        isLoading = false;
    }

    async Task Reset()
    {
        grid.Reset(true);
        await grid.FirstPage(true);
    }
}