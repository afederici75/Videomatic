@page "/videos"
@using Company.Videomatic.Domain.Aggregates.Video;
@using VideomaticRadzen.Components
@inject ISender Sender

<RadzenRow class="container-fluid my-0 sticky-top" style="background-color: red;">
    <div class="row">
        <h3>Videos here</h3>
    </div>

    <div class="row">
        <div>
            <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H2">
                Search Text
            </RadzenText>
            <RadzenButton Text="Reset" Click="@Reset" Style="margin-bottom: 20px;" />
            <RadzenTextBox @bind-Value="SearchText" Change="@(args => list.FirstPage(true))" />
            <RadzenLabel Text="@(count.ToString() + " Result(s)")" />
        </div>
    </div>    
</RadzenRow>


<RadzenDataList @ref="list" TItem="VideoDTO" 
                Data="@videos" Count="@count" 
                PageSize="@pageSize"
                LoadData="@LoadData" IsLoading="@isLoading"
                AllowVirtualization=true
                WrapItems=false>
    <Template Context="video">
        <RadzenCard>
            <RadzenRow>
                <RadzenColumn Size="4" Style="background: red">
                    <RadzenImage Path="@video.Thumbnail" style="border-radius: 4px 4px 0 0;" />
                </RadzenColumn>
                <RadzenColumn Size="8" Style="background: green">
                    <RadzenText TextStyle="TextStyle.DisplayH5">@(video.Name ?? "")</RadzenText>
                    <RadzenTextArea Cols="90" Rows="3" ReadOnly=true Value="@(video.Description)" 
                        TextStyle="TextStyle.Caption">@(video.Description)</RadzenTextArea>
                </RadzenColumn>
            </RadzenRow>
            
            <RadzenRow>
                    <RadzenColumn Size="12" Style="background: blue">
                    <RadzenStack Orientation="Orientation.Horizontal">
                            <RadzenText>@(video.Provider)</RadzenText>
                            <RadzenText>@(video.ProviderVideoId)</RadzenText>
                    </RadzenStack>                    
                </RadzenColumn>
            </RadzenRow>
            
        </RadzenCard>
    </Template>
</RadzenDataList>

@code {
    RadzenDataList<VideoDTO>? list;
    IEnumerable<VideoDTO>? videos;
    int count;

    [Parameter]
    [SupplyParameterFromQuery]
    public string? SearchText { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public long? PlaylistId { get; set; }

    int pageSize = 10;
    bool allowVirtualization = false;
    bool auto = true;    

    bool isLoading = false;
    
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await LoadData(new LoadDataArgs()
        {
            Skip = 0,
            Top = pageSize,
            OrderBy = "Id desc"
        });
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();

        string? sort = null;        
        if ((args.Sorts != null) && args.Sorts.Any())
        {
            sort = string.Join(", ", args.Sorts.Select(s => $"{s.Property} {(s.SortOrder == SortOrder.Ascending ? "asc" : "desc")}"));
        }

        var query = new GetVideosQuery(
                PlaylistIds: (PlaylistId != null) ? new long[] { PlaylistId.Value }: null,
                Skip: args.Skip,
                Take: args.Top,
                OrderBy: sort,
                SearchText: SearchText,
                IncludeTags: true,
                SelectedThumbnail: ThumbnailResolutionDTO.Medium);

        Page<VideoDTO> results = await Sender.Send(query);

        videos = results.Items;
        count = Convert.ToInt32(results.TotalCount);
        
        isLoading = false;
    }

    async Task Reset()
    {
        //grid.Reset(true);
        await list.FirstPage(true);
    }
}