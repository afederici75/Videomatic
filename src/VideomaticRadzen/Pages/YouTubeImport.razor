@page "/youtubeimport"
@using Domain.Playlists;

@inject ISender Sender

<RadzenPanel AllowCollapse="true" Collapsed="false">
    <HeaderTemplate>
        <RadzenText TextStyle="TextStyle.H6" >
            <RadzenIcon Icon="account_box" />Import Videos
        </RadzenText>
    </HeaderTemplate>

    <ChildContent>
        <RadzenStack Orientation="Orientation.Vertical">
            <RadzenTextArea @bind-value="@VideoUrls" Placeholder="Enter one or more YouTube videos here..." Cols="50" Rows="10" />
            
            <RadzenStack Orientation="Orientation.Horizontal">
            Target Playlist<RadzenDropDown @bind-Value=@TargetPlaylistId Data=@PlaylistDTOs TextProperty="Name" ValueProperty="Id" Style="width: 100%; max-width: 400px;" />
            </RadzenStack>

            <RadzenButton Click="ClickImportVideo" Text="Import Video(s)" />

            <RadzenText>@VideoImportResult</RadzenText>
        </RadzenStack>
    </ChildContent>

    <SummaryTemplate>

    </SummaryTemplate>
</RadzenPanel>


<RadzenPanel AllowCollapse="true" Collapsed="false">
    <HeaderTemplate>
        <RadzenText TextStyle="TextStyle.H6">
            <RadzenIcon Icon="account_box" />Import Playlists
        </RadzenText>
    </HeaderTemplate>

    <ChildContent>
        <RadzenStack Orientation="Orientation.Vertical">
            <RadzenTextArea @bind-value="@PlaylistUrls" Placeholder="Enter one or more YouTube playlists here..." Cols="50" Rows="10" />
            
            <RadzenButton Click="ClickImportPlaylist" Text="Import Playlist(s)" />
            
            <RadzenText>@PlaylistImportResult</RadzenText>
        </RadzenStack>
    </ChildContent>

    <SummaryTemplate>

    </SummaryTemplate>
</RadzenPanel>




@code {
    public string? VideoUrls { get; set; } = @"https://www.youtube.com/watch?v=V8WuljiJFBI
https://www.youtube.com/watch?v=tMwLRbX66Jo
https://www.youtube.com/watch?v=YzPhcUyZXWA
https://www.youtube.com/watch?v=Ma8oi5MU1dk";

    public string? PlaylistUrls { get; set; } = @"https://www.youtube.com/playlist?list=PLLdi1lheZYVJHCx7igCJIUmw6eGmpb4kb
https://www.youtube.com/playlist?list=PLLdi1lheZYVK7x4Cv6vSDJJe2DuMUZHjt
https://www.youtube.com/playlist?list=PLLdi1lheZYVK68zniHtA6hCtsaRpQvcDF";

    public string VideoImportResult { get; set; } = "No videos imported yet...";
    public string PlaylistImportResult { get; set; } = "No playlists imported yet...";

    public IEnumerable<PlaylistDTO> PlaylistDTOs { get; set; } = new List<PlaylistDTO>();
    public PlaylistId? TargetPlaylistId { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        var query = new GetPlaylistsQuery(orderBy: "Name");

        Page<PlaylistDTO> results = await Sender.Send(query);

        PlaylistDTOs = results.Items;

        await base.OnInitializedAsync();
    }

    async Task ClickImportVideo()
    {
        if (string.IsNullOrEmpty(VideoUrls))
            return;

        var urls = VideoUrls.Split(new[] { '\r', '\n' }, StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);

        var cmd = new ImportVideosCommand(urls, TargetPlaylistId);        
        var response = await Sender.Send(cmd);

        VideoImportResult = response.ToString();
    }

    async Task ClickImportPlaylist()
    {
        if (string.IsNullOrEmpty(PlaylistUrls))
            return;

        var urls = PlaylistUrls.Split(new[] { '\r','\n'}, StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);

        var cmd = new ImportPlaylistsCommand(urls);
        var response = await Sender.Send(cmd);

        PlaylistImportResult = response.ToString();
    }
}