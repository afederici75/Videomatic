@page "/videoDetails/{videoId:long?}"
@using Company.Videomatic.Application.Features.Transcripts.Queries;
@using Company.Videomatic.Application.Features.Transcripts;
@using Company.Videomatic.Domain.Aggregates.Video;
@using VideomaticRadzen.Components
@using VideomaticRadzen.Components.Videos
@inject ISender Sender

@if (video != null)
{
<VideoDetailHeader Video="@video" />
}

<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="Description">
                <RadzenRow>
                    Original Description
                    <RadzenTextArea Style="min-width: 100%" Rows="15" Value="@(video?.Description)" />
                </RadzenRow>
                <RadzenRow>
                    AI-Generated Description
                    <RadzenTextArea Style="min-width: 100%" Rows="15" Value="coming soon..." />
                </RadzenRow>
        </RadzenTabsItem>
        
        <RadzenTabsItem Text="Transcripts">
            @foreach (var t in transcripts)
            {
                if (t.Lines == null)
                    continue;
                
                <RadzenText Text="@(t.LineCount.ToString())"></RadzenText>

                foreach (var l in t.Lines)
                {
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenText Text="@(l.StartsAt.ToString())"></RadzenText>
                        <RadzenText Text="@(l.Duration.ToString())"></RadzenText>
                        <RadzenText Text="@(l.Text)"></RadzenText>
                    </RadzenStack>
                }
            }                 
        </RadzenTabsItem>

        <RadzenTabsItem Text="Table of Contents (AI)">
        </RadzenTabsItem>

        <RadzenTabsItem Text="Topics (AI)">
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>        


@code {
    bool isLoading = false;
    VideoDTO? video;
    IEnumerable<TranscriptDTO> transcripts = new TranscriptDTO[0];  

    [Parameter]
    [SupplyParameterFromQuery(Name = nameof(VideoId))]
    public int? VideoId { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        if (VideoId != null)
            await GetVideo();

        await base.OnParametersSetAsync();
    }

    async Task GetVideo()
    {
        isLoading = true;

        await Task.Yield();

        var query = new GetVideosQuery(
                VideoIds: new int[] { VideoId!.Value },
                IncludeTags: true,
                SelectedThumbnail: ThumbnailResolutionDTO.Standard);

        Page<VideoDTO> results = await Sender.Send(query);

        video = results.Items.SingleOrDefault();
        if (video != null)
        {
            var query2 = new GetTranscriptsQuery(VideoIds: new[] { VideoId!.Value });
            var resp2 = await Sender.Send(query2);

            transcripts = resp2.Items;
        }

        isLoading = false;        
    }
}