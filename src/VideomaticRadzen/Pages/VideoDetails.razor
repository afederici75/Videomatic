@page "/videoDetails/{videoId:int?}"
@using Application.Features.Transcripts.Queries;
@using Application.Features.Transcripts;
@using Domain.Videos;
@using VideomaticRadzen.Components
@using VideomaticRadzen.Components.Videos
@inject ISender Sender

@if (video == null)
{
    return;
}

<VideoDetailHeader Video="@video" />

<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="Description">
            <VideoDetailDescriptionTab Video="@video" />
        </RadzenTabsItem>
        
        <RadzenTabsItem Text="@("Transcripts ("+ transcripts.Count().ToString() + ")" )">
            <VideoDetailsTranscriptsTab Transcripts="@transcripts" />
        </RadzenTabsItem>

        <RadzenTabsItem Text="Table of Contents (AI)">

        </RadzenTabsItem>

        <RadzenTabsItem Text="Topics (AI)">
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>        

@code {
    //bool isLoading = false;
    VideoDTO? video;
    IEnumerable<TranscriptDTO> transcripts = new TranscriptDTO[0];  

    [Parameter]
    [SupplyParameterFromQuery(Name = nameof(VideoId))]
    public int? VideoId { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        if (VideoId != null)
            await GetVideo();

        await base.OnParametersSetAsync();
    }

    async Task GetVideo()
    {
        //isLoading = true;

        await Task.Yield();

        var query = new GetVideosQuery(VideoIds: new int[] { VideoId!.Value });

        Page<VideoDTO> results = await Sender.Send(query);

        video = results.Items.SingleOrDefault();
        if (video != null)
        {
            var query2 = new GetTranscriptsQuery(VideoIds: new[] { VideoId!.Value });
            var resp2 = await Sender.Send(query2);

            transcripts = resp2.Items;
        }

        //isLoading = false;        
    }
}