5/3
-Starting to reproduce the following:
	-https://github.com/openai/openai-cookbook/blob/main/examples/Question_answering_using_embeddings.ipynb?ref=mlq.ai
-Everything uses IRepository and IReadOnlyRepository.
-Found several articles on chunking 
	-I will try to follow this one: https://github.com/openai/openai-cookbook/blob/main/examples/Question_answering_using_embeddings.ipynb?ref=mlq.ai

4/29
-Added WebAPI to the project. Technically we have a REST endpoint!
-Trying to code a Blazor app that uses only the Swagger stuff.
	-This is already showing me that the APi generation is not as good as I thought: the result
	types are not being generated correctly. I'm getting a lot of voide methods for Queryes.
		-Fixed using ProducesResponseType and AsParameters (<-- glorious!!)
-Weird docker issue after restart. Sql 2022 gives me 'A connection was successfully established 
with the server, but then an error occurred during the pre-login handshake. (provider: TCP Provider, 
error: 0 - An existing connection was forcibly closed by the remote host.)'
	-I had to install 2019.

4/28
-Great day with a lot of things. I think I'm getting close to a MVP.


4/27
-Lots of problems with DbContext's ChangeTracker
	-Tests like ApplicationTests.ImportVideoCommandWorks() was blowing up because the 
	ChangeTracker was tracking the Video object
	-Resolved by clearing the ChangeTracker in the SaveChangesAsync
	    -https://itsnotbugitsfeature.com/tag/entityframework/
		-https://www.entityframeworktutorial.net/efcore/update-data-in-entity-framework-core.aspx
		-https://www.learnentityframeworkcore.com/dbcontext/modifying-data
		-https://pmichaels.net/entity-framework-error-cannot-be-tracked/entity-framework-cannot-be-tracked/

-Adding IRepository stuff
-Key articles so far:
    - https://deviq.com/design-patterns
	- https://deviq.com/design-patterns/specification-pattern
	- http://specification.ardalis.com/

4/26
-Most of the day on Specifications. Great results!

4/25
-Renamed Drivers to Infrastructure. It's a better name and more DDD-ish.	

4/24
-Need to create test for the application Commands and Queries

4/23
-Investigating into DDD class design.
	1. https://ssw.com.au/rules/rules-to-better-clean-architecture/
	2. https://www.thereformedprogrammer.net/creating-domain-driven-design-entity-classes-with-entity-framework-core/
	3. https://stackoverflow.com/questions/20886049/ef-code-first-foreign-key-without-navigation-property
		Very good explanation of how to design classes following DDD conventions. See init properties all over the place.
		"I don't need navigation properties (although they're nice) because I am practicing DDD and I want Parent and Child 
		to be two separate aggregate roots. I want them to be able to talk to each other via foreign key not through 
		infrastructure-specific Entity Framework navigation properties.
		All you have to do is to configure the relationship on one side using HasOne and WithMany without specifying the 
		navigation properties (they're not there after all)."
-Seems to work well. I like the fact I didn't use *ANY* navigation properties in EF. It's much cleaner, or so it seems at the moment.

4/22
-Talked to ChatGPT to help me make this layout.
	
	|---------------------------------------------------------|
	| Videomatic | Search Box                | Icon1 | Icon 2 |
	|---------------------------------------------------------|
	| Home              |                        |            |
	| YouTube Playlists |                        |   Expand   |
	| Google Drive      |  Infinite scroll area  |    Hide    |
	| Updates           |                        |    Area    |
	| FAQ               |                        |            |
	|---------------------------------------------------------|
	|Text1 | Text2                                     |Text3 |
	|---------------------------------------------------------|
